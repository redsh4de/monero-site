---
export interface DropdownItem {
  label: string;
  href: string;
  desc?: string;
  image: string;
}
export interface Props {
  label: string;
  href?: string; // optional now
  dropdown?: DropdownItem[];
}
const { label, href, dropdown } = Astro.props;
const id = "dd-" + label.toLowerCase().replace(/[^a-z0-9]+/g, "-");
---

<li class={`item${dropdown ? " has-dd" : ""}`}>
  {dropdown && <input id={id} class="dd-toggle" type="checkbox" aria-hidden="true" />}

  <div class="row">
    {dropdown && !href ? (
      // No link target: whole label acts as the toggle on mobile
      <label for={id} class="link trigger" aria-controls={id}>{label}</label>
    ) : (
      <a href={href} class="link">{label}</a>
    )}

    {dropdown && (
      <label for={id} class="caret" aria-label={`Expand ${label}`} aria-controls={id}>
        <svg viewBox="0 0 24 24" aria-hidden="true" focusable="false">
          <path d="M6 9l6 6 6-6" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
      </label>
    )}

    {/* If there IS an href, overlay a mobile-only cover that toggles instead of navigating */}
    {dropdown && href && <label for={id} class="mobile-cover" aria-hidden="true"></label>}
  </div>

  {dropdown && (
    <div class="dropdown" role="menu" aria-label={`${label} menu`}>
      {dropdown.map((item) => (
        <a href={item.href} class="dropdown-item">
          <img src={item.image} alt="" class="icon" />
          <div class="content">
            <div class="title">{item.label}</div>
            {item.desc && <div class="desc">{item.desc}</div>}
          </div>
        </a>
      ))}
    </div>
  )}
</li>

<style>
/* ===== Tokens ===== */
:root{
  --link:#cfcfd7; --linkH:#fff;
  --dropBg:#1c1b22; --dropFg:#d6d6dc; --dropMuted:#a0a0ad;
}
@media (prefers-color-scheme: light){
  :root{ --link:#111; --linkH:#000; --dropBg:#f5f2fa; --dropFg:#000; --dropMuted:#666; }
}

/* ===== Base ===== */
.item{ position:relative; }
.row{ position:relative; display:flex; align-items:center; gap:.35rem; }
.link{ color:var(--link); text-decoration:none; padding:.4rem 0; font-weight:500; }
.link:focus-visible{ outline:2px solid currentColor; outline-offset:2px; }

/* Trigger label (used when no href) */
.trigger{ cursor:pointer; }

/* Caret */
.caret{ display:inline-flex; align-items:center; justify-content:center; width:1.1rem; height:1.1rem; margin-left:.15rem; border-radius:.2rem; }
.caret svg{ width:1em; height:1em; transition:transform .2s ease; }

/* Desktop dropdown (hover + focus inside dropdown only) */
.dropdown{
  position:absolute; top:100%; left:0;
  margin-top:.5rem; min-width:560px; padding:1rem;
  border-radius:.75rem; background:var(--dropBg);
  box-shadow:0 12px 30px rgba(0,0,0,.35);
  opacity:0; visibility:hidden;
  transition:opacity .15s ease, visibility .15s ease;
  display:grid; grid-template-columns:1fr 1fr; gap:1rem 1.5rem; z-index:20;
}

/* Hover bridge + desktop behavior */
@media (hover:hover) and (pointer:fine){
  .has-dd::after{ content:""; position:absolute; left:0; right:0; top:100%; height:10px; }
  .has-dd:hover > .dropdown,
  .has-dd:has(.dropdown :focus) > .dropdown{ opacity:1; visibility:visible; }
  .has-dd:hover > .row > .link,
  .has-dd:has(.dropdown :focus) > .row > .link{ color:var(--linkH); }

  /* On desktop, caret/trigger/cover don't intercept pointer */
  .caret, .trigger, .mobile-cover{ pointer-events:none; }
}

/* Dropdown items */
.dropdown-item{ display:flex; align-items:flex-start; gap:1rem; color:var(--dropFg); text-decoration:none; padding:.75rem; border-radius:.5rem; }
.dropdown-item:hover, .dropdown-item:focus{ background:rgba(255,255,255,.06); }
.icon{ width:2rem; height:2rem; flex:0 0 2rem; }
.title{ font-weight:600; }
.desc{ font-size:.9rem; color:var(--dropMuted); line-height:1.35; margin-top:.15rem; }

/* ===== Mobile (checkbox expand) ===== */
.dd-toggle{ display:none; }

@media (max-width:900px){
  .row{ justify-content:space-between; padding:.5rem 0; }

  /* Whole row toggles on mobile when dropdown exists */
  .mobile-cover{
    display:block; position:absolute; inset:0; /* cover entire row */
    cursor:pointer;
  }
  /* If there is no href (we used .trigger as label), it already toggles. Ensure it's clickable on mobile */
  .trigger{ pointer-events:auto; }

  /* Caret also toggles */
  .caret{ pointer-events:auto; }

  /* Mobile dropdown: visible/clickable; open/close via max-height only */
  .dropdown{
    position:static; margin:.25rem 0 0 0; min-width:unset; padding:0;
    background:none; box-shadow:none; border-radius:0;
    opacity:1; visibility:visible;
    display:block; max-height:0; overflow:hidden; transition:max-height .25s ease;
  }
  .dd-toggle:checked ~ .dropdown{ max-height:100vh; }

  /* Rotate caret ONLY on mobile when expanded */
  .dd-toggle:checked + .row > .caret svg{ transform:rotate(180deg); }
}

/* ===== Reduce motion ===== */
@media (prefers-reduced-motion: reduce){
  .dropdown, .caret svg{ transition:none; }
}
</style>
