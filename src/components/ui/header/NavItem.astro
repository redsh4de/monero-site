---
import dropdownCaret from "@/assets/icons/dropdown-caret.avif?url";
import Icon from "../Icon.astro";

export interface DropdownItem {
  label: string;
  href: string;
  desc?: string;
  image: string;
}
export interface Props {
  label: string;
  href?: string;
  dropdown?: DropdownItem[];
}

const { label, href, dropdown = [] } = Astro.props;
const isDropdown = dropdown.length > 0;
const id = "dd-" + label.toLowerCase().replace(/[^a-z0-9]+/g, "-");
---

<li class={`item${isDropdown ? " has-dd" : ""}`}>
  {isDropdown ? (
    <>
      <input id={id} class="dd-toggle" type="checkbox" aria-hidden="true" />

      <div class="row">
        {href ? (
          <a href={href} class="link">{label}</a>
        ) : (
          <span class="link" role="link" tabindex="0">{label}</span>
        )}

        <label for={id} class="caret" aria-label={`Toggle ${label} menu`}>
          <Icon src={dropdownCaret} />
        </label>

        <label for={id} class="mobile-cover" aria-hidden="true" />
      </div>

      <div class="dropdown" role="menu" aria-label={`${label} menu`}>
        {dropdown.map((item) => (
          <a href={item.href} class="dropdown-item" role="menuitem">
            <img src={item.image} alt="" class="icon" />
            <div class="content">
              <div class="title">{item.label}</div>
              {item.desc && <div class="desc">{item.desc}</div>}
            </div>
          </a>
        ))}
      </div>
    </>
  ) : (
    <a href={href} class="link row">{label}</a>
  )}
</li>

<style>
  /* === Base === */
  .item { position: relative; }
  .row {
    position: relative;
    display: flex;
    align-items: center;
    gap: 0.35rem;
    padding: 0.4rem 0;
  }
  .link {
    color: var(--paragraph-main);
    text-decoration: none;
    font-weight: 500;
    flex: 1;
  }
  .link:focus-visible { outline: 2px solid currentColor; outline-offset: 2px; }
  .link:hover { color: var(--heading-color); }

  .caret {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    margin-left: 0.15rem;
    border-radius: 0.2rem;
    transition: transform 0.2s ease;
  }

  .mobile-cover { display: none; } /* inert on desktop */
  .dd-toggle { display: none; }

  .dropdown {
    position: absolute;
    top: 100%;
    left: 0;
    margin-top: 0.5rem;
    min-width: 35rem;
    padding: 1rem;
    border-radius: 0.75rem;
    background: var(--card-color);
    box-shadow: 0 12px 30px rgba(0,0,0,0.35);
    opacity: 0;
    visibility: hidden;
    transition: opacity .15s ease, visibility .15s ease;
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem 1.5rem;
    z-index: 20;
  }

  /* Items */
  .dropdown-item {
    display: flex;
    align-items: flex-start;
    gap: 1rem;
    color: var(--heading-color);
    text-decoration: none;
    padding: 0.75rem;
    border-radius: 0.5rem;
  }
  .dropdown-item:where(:hover, :focus) { background: var(--card-hover-color); }
  .icon { width: 2rem; height: 2rem; flex: 0 0 2rem; }
  .title { font-weight: 600; }
  .desc {
    font-size: 0.9rem;
    color: var(--paragraph-subtitle);
    line-height: 1.35;
    margin-top: 0.15rem;
  }

  /* === Desktop hover/focus === */
  @media (hover: hover) and (pointer: fine) {
    .has-dd::after {
      content: "";
      position: absolute; left: 0; right: 0; top: 100%; height: 0.625rem;
    }
    /* Show panel on hover OR when submenu is focused */
    .has-dd:is(:hover, :has(.dropdown :focus)) > .dropdown {
      opacity: 1; visibility: visible;
    }
    .has-dd:is(:hover, :has(.dropdown :focus)) > .row > .link {
      color: var(--heading-color);
    }
    .mobile-cover { pointer-events: none; }
  }

  /* === Mobile (whole-row toggle) === */
  @media (max-width: 900px) {
    .row { padding: 0.5rem 0; }
    .mobile-cover {
      display: block;
      position: absolute;
      inset: 0;
      pointer-events: auto;
      cursor: pointer;
      z-index: 1;
    }

    .dropdown {
      position: static;
      margin: 0.25rem 0 0;
      min-width: unset;
      padding: 0;
      background: none;
      box-shadow: none;
      border-radius: 0;
      opacity: 1; visibility: visible;
      display: block;
      max-height: 0; overflow: hidden;
      transition: max-height 0.25s ease;
    }
    .dd-toggle:checked ~ .dropdown { max-height: 100vh; }
    .dd-toggle:checked + .row > .caret { transform: rotate(180deg); }
  }

  /* === Reduce motion === */
  @media (prefers-reduced-motion: reduce) {
    .dropdown, .caret { transition: none; }
  }
</style>